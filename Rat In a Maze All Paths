vector<vector<int>>ans; //store o/p array
void func(vector<vector<int>>&maze,int i,int j,int n,vector<vector<int> >&path)
{
   if(i==n-1&&j== n-1) //reached the destination
   {
       path[i][j]=1;   //marked as 1
       vector<int>temp;  //create temp array
       for(int i =0;i<n;i++)
       {
           for(int j=0;j<n;j++)
           {
               temp.push_back(path[i][j]);  //store the value of cell
           }
       }
       ans.push_back(temp);   //put it in ans
       return;
   }
    if(i<0||j<0 ||i>=n||j>=n||path[i][j]==1 || maze[i][j]==0)
        //check out of bound and path is unvisited and blocked element
        return;
    path[i][j]=1;      //if every condition is true then mark visited to that cell
    func(maze,i+1,j,n,path); //and call for its downward
    func(maze,i-1,j,n,path); //upward
    func(maze,i,j+1,n,path);//rightward
    func(maze,i,j-1,n,path); //leftward 
    path[i][j]=0; //if recurssion call complete then remove mark that element as unchecked (backtracking)//
}

vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
    vector<vector<int>>path(n,vector<int>(n,0)); //to mark visited
    func(maze,0,0,n,path); 
    return ans;    
}
